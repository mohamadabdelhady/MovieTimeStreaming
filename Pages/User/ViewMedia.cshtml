@page
@using Microsoft.AspNetCore.Identity
@using NuGet.Protocol
@inject UserManager<ApplicationUser> UserManager
@model MovieTimeStreaming.Pages.User.ViewMediaModel
@{var CurrentUser = UserManager.GetUserAsync(User);}
@{
    Layout = "Shared/_Layout_User";
    ViewData["Title"] = "Main";
}
<div class="row mt-4 container">
    <div class="col-4">
        <img alt="Media poster image" class="MediaPosterImg mb-2" src="@Model.MediaImg"/>
        @if (Model.IsBookmarked==1)
        {
            <a href="#" onclick="event.preventDefault(); addOrRemoveBookmark()" id="bookmark" class="btn my-btn" style="width: 100%">Remove Bookmark</a>
        }
        else
        {
            <a href="#" onclick="event.preventDefault(); addOrRemoveBookmark()" id="bookmark" class="btn my-btn" style="width: 100%">Bookmark</a>
        }
        @if (@Model.SeasonNum==0)
        {
            <a asp-page="videoPlayer" style="width: 100%" asp-route-id="@Model.MediaId" class="btn my-btn mt-2">Watch</a>
        }
    </div>
    <div class="col-6">
        <h2>@Model.MediaTitle</h2>
        <p>Media Type: @Model.MediaType</p>
        <p>Media Genere: @Model.MediaGenre</p>
        <br/>
        <h5>About </h5>
        <div class="card">
            <p class="p-2">@Model.MediaAbout</p>
        </div>
    </div>
</div>
<div class="row container mt-5">
    <div class="col-12">
        
        <div id="app">
            <div>
            <div class="m-4 overflow-scroll" style="height: 320px;">
                    @if (@Model.SeasonNum != 0)
                    {
                        <hr/>
                        <select id="selectSeason" v-on:input="getEpisodes" class="form-select" aria-label="Default select example" style="width: 40%">
                            @for (var i = 1; i <=@Model.SeasonNum; i++)
                            {
                                @if (i == 1)
                                {
                                    <option  value="@i" selected>Season @i</option>
                                }
                                else
                                {
                                    <option value="@i">Season @i</option>
                                }
                            }
                        </select>
                       
                        <div class="d-flex flex-wrap justify-content-start m-4">
                            <span v-for="(item,index) in currentSeasonEp" class="card p-2 ms-2 mb-2" style="width: 8rem">
                                <p>Episode {{item.episodeNum}}</p>
                                <p>title {{item.title}}</p>
                                <a :href="'VideoPlayer?id='+item.id+'&series=1'"  class="stretched-link"></a>
                            </span>
                      </div>
                    }
                    </div>
                <div>
                    <div v-if="!my_review.length" class="review p-2">
                        <p class="usersRate">What did you think of this @Model.MediaType</p>
                        <span class="mt-2 stars" style="padding-left: 60px;">
                            <a href="#" class='' id="star_1" @@mouseover="fill_star(1)" @@mouseleave="empty_star()" v-on:click.prevent="set_rating(1)">
                                <i class="fa fa-star fa-3x"></i>
                            </a>
                            <a href="#" class='' id="star_2" @@mouseover="fill_star(2)" @@mouseleave="empty_star()" v-on:click.prevent="set_rating(2)">
                                <i class="fa fa-star fa-3x"></i>
                            </a>
                            <a href="#" class='' id="star_3" @@mouseover="fill_star(3)" @@mouseleave="empty_star()" v-on:click.prevent="set_rating(3)">
                                <i class="fa fa-star fa-3x"></i>
                            </a>
                            <a href="#" class='' id="star_4" @@mouseover="fill_star(4)" @@mouseleave="empty_star()" v-on:click.prevent="set_rating(4)">
                                <i class="fa fa-star fa-3x"></i>
                            </a>
                            <a href="#" class='' id="star_5" @@mouseover="fill_star(5)" @@mouseleave="empty_star()" v-on:click.prevent="set_rating(5)">
                                <i class="fa fa-star fa-3x"></i>
                            </a>
                            <span class="ms-2 Rate">{{my_rating}}/5</span>
                            <span v-if="my_rating!=''" class="ms-2 rate">
                                <a href="#" v-on:click.prevent="clear_rating">Clear rating</a>
                            </span>
                        </span>
                        <div class="mt-3">
                            <textarea row="10" placeholder=" Write a review (optional)." class="comment_in" v-model="user_review" @@keyup.enter="add_review"></textarea>
                            <button v-if="edit_review==false" class="btn my-btn" style="height: 40px;" :disabled="user_review==''" v-on:click="add_review">Post</button>
                            <div v-else>
                                <button class="btn" style="height: 40px;" :disabled="user_review==''" v-on:click="update_review">Edit</button>
                                <button class="btn ms-2 btn-cancel" style="height: 40px;" :disabled="user_review==''" v-on:click="cancel_edit">Cancel</button>
                            </div>
                            <p id="error_post" style="color: firebrick; display: none;">You have to pick a rating to post a review.</p>
                        </div>

                    </div>
                    <div v-else class="my_review p-2" v-for="(review,index) in my_review">
                        <span class="">Your review</span>
                        <a href="#">
                            <span class="pl-1">{{review.name}}</span>
                        </a>
                        <span style="float: right;">
                            <div class="">
                                <span class="fa fa-star checked" v-if="review.userRating>=1"></span>
                                <span class="fa fa-star " v-else></span>
                                <span class="fa fa-star checked " v-if="review.userRating>=2"></span>
                                <span class="fa fa-star " v-else></span>
                                <span class="fa fa-star checked " v-if="review.userRating>=3"></span>
                                <span class="fa fa-star " v-else></span>
                                <span class="fa fa-star checked -" v-if="review.userRating>=4"></span>
                                <span class="fa fa-star " v-else></span>
                                <span class="fa fa-star checked " v-if="review.userRating>=5"></span>
                                <span class="fa fa-star " v-else></span>
                                <span class="ms-2 rate">{{review.userRating}}/5</span>
                            </div>
                        </span>
                        <p class="pt-2" style="padding-left: 60px;">{{review.userReview}}</p>
                        <div><a href="#" v-on:click.prevent="deleteReview" class="me-3" style="color: #753939">Delete</a><a href="">Edit</a></div>
                    </div>

                </div>
                <hr>
                <p class=" mt-4">What other Users think of the @Model.MediaType.</p>

                <div class="mt-5">
                    <p v-if="!AllReviews.length" class="" style="margin-left:50px;">There is no reviews on this @Model.MediaType, be the first one to review it.</p>
                    <div class="comments" v-for="(review,index) in AllReviews">
                        <div>
                            <img :src="review.profileImage" id="userAvatar" class="me-2">
                            <span class="pl-1">{{review.userName}}</span>
                            <span style="float: right;">
                                <div>
                                    <span class="">
                                        <span class="fa fa-star checked" v-if="review.userRating>=1"></span>
                                        <span class="fa fa-star " v-else></span>
                                        <span class="fa fa-star checked " v-if="review.userRating>=2"></span>
                                        <span class="fa fa-star " v-else></span>
                                        <span class="fa fa-star checked " v-if="review.userRating>=3"></span>
                                        <span class="fa fa-star " v-else></span>
                                        <span class="fa fa-star checked -" v-if="review.userRating>=4"></span>
                                        <span class="fa fa-star " v-else></span>
                                        <span class="fa fa-star checked " v-if="review.userRating>=5"></span>
                                        <span class="fa fa-star " v-else></span>
                                        <span class="ms-2 rate">{{review.userRating}}/5</span>
                                    </span>

                                </div>
                            </span>
                        </div>
                        <p class="pt-2" style="padding-left: 60px;">{{review.userReview}}</p>
                        <hr>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<script>
let is=@Model.IsBookmarked;
 function addOrRemoveBookmark()
 {
     if (!is)
         {
 axios.get('/api/media/@Model.MediaId/bookmark').then(response => {
 document.getElementById("bookmark").innerText="Remove bookmark";
is = false;
 });
 }
   else 
       {
  axios.get('/api/media/@Model.MediaId/removeBookmark').then(response => {
  document.getElementById("bookmark").innerText="Bookmark";
  is = true;
  });
  }
   }
 
const { createApp } = Vue
      createApp({
     
        data() {
            return {
                        AllReviews: [],
                        page: 1,
                        made_review:1,
                        edit_review:false,
                        my_rating: "",
                        user_review: "",
                        my_review: [],
                        episodes:"",
                        currentSeasonEp:[]
                       
                    }
            },
            methods: {
           
                    get_reviews() {
                        axios.get('/api/review/@Model.MediaId/getAll'+'?page=' + this.page).then(response => {
                            $.each(response.data, (key, v) => {
                                this.AllReviews.push(v);
                            });
                        })
            
                    },
            
                  
                     fill_star(num) {
                              
                                for (let i = 1; i <= num; i++) {
                                   let targetDiv= document.getElementById('star_' + i).style.color = 'goldenrod';
                                  
                                }
                            },
                            empty_star() {
                    
                                let current_rate = this.my_rating;
                                for (let i = 5; i > current_rate; i--) {
                                    document.getElementById('star_' + i).style.color = '#212529';
                                }
                            },
                            set_rating(num) {
                                this.my_rating = num;
                            },
                            add_review() {
                        const headers = {
                            "Content-Type": "application/x-www-form-urlencoded"
                        }
                                if (this.my_rating != '') {
                                    document.getElementById('error_post').style.display = 'none';
                                    axios.post('/api/review/@Model.MediaId/add', {
                                        review: this.user_review,
                                        rating: this.my_rating,
                                    },
                                    {headers:headers}
                                    ).then(response => {
                                    this.user_review = "";
                                    this.get_my_review();
                                });} else {
                                    document.getElementById('error_post').style.display = 'block';
                                }
                            },
                            get_my_review() {
                                axios.get('/api/review/@Model.MediaId/get').then(response => {
                                    if (response.data != "") {
                                        this.my_review.push(response.data);
                    
                                    } else {
                                        this.my_review = [];
                                    }
                                });
                            },
                            clear_rating() {
                                this.my_rating = "";
                                this.empty_star();
                            },
                            edit_reviewF() {
                                this.user_review = this.my_review[0].review;
                                this.my_rating = this.my_review[0].rating;
                                this.my_review = [];
                                this.edit_review = true;
                    
                            },
                            update_review()
                            {
                                if (this.my_rating != '') {
                                    document.getElementById('error_post').style.display = 'none';
                                    axios.post('edit_review', {
                                        review: this.user_review,
                                        rating: this.my_rating,
                                        user: this.user_id,
                                    })
                                    this.user_review = "";
                                    this.$emit('update_review');
                                } else {
                                    document.getElementById('error_post').style.display = 'block';
                                }
                            },
                            deleteReview()
                            {
                                axios.delete('/api/review/@Model.MediaId/delete').then(response => {
                                    this.get_my_review();
                                    this.clear_rating();
                                });
                            },
                            cancel_edit()
                            {
                                this.$emit('update_review');
                            },
                             getEpisodes()
                                        {
                                            let chosen=document.getElementById('selectSeason').value;
                                             console.log(chosen)
                                              this.currentSeasonEp=[];
                                            this.episodes.forEach(item=>{
                                               if (item.seasonNum==chosen) 
                                                   {
                                                      
                                                       this.currentSeasonEp.push(item);
                                                      

                                                   }
                                           });
                                        },
                           
                },
                mounted() {
                    this.get_reviews();
                    this.get_my_review();
                    this.episodes=@Json.Serialize(Model.EpisodesList);
                    this.getEpisodes();
                        
                }, 
  }).mount('#app')
</script>